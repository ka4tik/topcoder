
// {{{ Boilerplate Code <--------------------------------------------------
// vim:filetype=cpp:foldmethod=marker:foldmarker={{{,}}}

#include <algorithm>
#include <bitset>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <utility>
#include <vector>

#define FOR(I,A,B) for(int I = (A); I < (B); ++I)
#define REP(I,n)   FOR(I,0,n)
#define ALL(A)     (A).begin(), (A).end()

using namespace std;

// }}}

#define db(x) cerr << #x << ": " << x << endl;
#define db2(x, y) cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define db3(x, y, z) cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;
#define db4(a, b, c, d) cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << endl;
#define db5(a, b, c, d, e) cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << endl;
#define db6(a, b, c, d, e, f) cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << " | " << #f << ": " << f << endl;
class BigOEasy
{
    public:
        string isBounded(vector <string> graph)
        {
            int n=graph.size();
            int reach[n][n];
            for(int i=0;i<n;i++)
                for(int j=0;j<n;j++)
                    reach[i][j]=(graph[i][j]=='Y');
            for(int k=0;k<n;k++)
            {
                for(int i=0;i<n;i++)
                {
                    for(int j=0;j<n;j++)
                    {
                        reach[i][j] |= reach[i][k] && reach[k][j]; 
                    }
                }
            }
            for(int i=0;i<n;i++)
                reach[i][i] = 1; 


            int G = 0; 
            vector<int> group(n, -1); 
            //vector<int> groupRepr; 
            for(int i=0;i<n;i++) { 
                if (group[i] != -1) 
                    continue; 

                //groupRepr.push_back(i); 
                for(int j=i;j<n;j++)
                    //FOR(j, i, n) 
                    if (reach[i][j] && reach[j][i]) { 
                        group[j] = G; 
                    } 
                G++; 
            } 
            db(G);
            for(int i=0;i<G;i++)
            {
                int c=0;
                for(int j=0;j<n;j++)
                    if(group[j]==i)
                        c++;
                if(c>=3)
                    return "Unbounded";
            }
            return "Bounded";
        }
};

