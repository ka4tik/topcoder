// {{{ Boilerplate Code <--------------------------------------------------
// vim:filetype=cpp:foldmethod=marker:foldmarker={{{,}}}

#include <algorithm>
#include <bitset>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <utility>
#include <vector>
#define db(x) cerr << #x << ": " << x << endl;
#define db2(x, y) cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define db3(x, y, z) cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;
#define db4(a, b, c, d) cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << endl;
#define db5(a, b, c, d, e) cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << endl;
#define db6(a, b, c, d, e, f) cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << " | " << #f << ": " << f << endl;

#define FOR(I,A,B) for(int I = (A); I < (B); ++I)
#define REP(I,N)   FOR(I,0,N)
#define ALL(A)     (A).begin(), (A).end()

using namespace std;

// }}}

#define ll long long
class WinterAndPresents
{
    public:
        long long getNumber(vector <int> apple, vector <int> orange)
        {
            int n=apple.size();
            vector<ll> sum(n);
            for(int i=0;i<n;i++) sum[i]=apple[i]+orange[i];
            ll t=*min_element(sum.begin(),sum.end());
            ll ans=0;
            for(int i=1;i<=t;i++)
            {
                int mxapples=0;
                int mnapples=0;
                for(int j=0;j<n;j++)
                {
                    mxapples+=min(apple[j],i);
                    mnapples+=min(orange[j],i);
                }
                mnapples=i*n-mnapples;
                //db2(mxapples,mnapples);
                ans+=(mxapples-mnapples+1);
            }
            return ans;

        }
};


// Edited by VimCoder 0.3.5
// http://github.com/chazmcgarvey/vimcoder